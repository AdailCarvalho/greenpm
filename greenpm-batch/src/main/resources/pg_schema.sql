/*
	PG Schema
	@author: Adail Carvalho
	@since : 2018-04-28
*/


-- SEQUENCE
DROP SEQUENCE IF EXISTS project_seq CASCADE;
 CREATE SEQUENCE project_seq START WITH 1 INCREMENT BY 1;
 
DROP SEQUENCE IF EXISTS employee_seq CASCADE;
CREATE SEQUENCE employee_seq START WITH 1 INCREMENT BY 1;
 
DROP SEQUENCE IF EXISTS manager_seq CASCADE; 
CREATE SEQUENCE manager_seq START WITH 1 INCREMENT BY 1; 

DROP SEQUENCE IF EXISTS user_seq CASCADE;
CREATE SEQUENCE user_seq START WITH 1 INCREMENT BY 1;
 
-- SCHEMAS / TABLES

CREATE SCHEMA IF NOT EXISTS batch;
DROP TABLE IF EXISTS batch.STAGE_PROJECT;
CREATE TABLE batch.STAGE_PROJECT
(	
	project_cod VARCHAR(32),
	project_name VARCHAR(128),
	plan_init DATE,
	plan_end DATE,
	manager_cod VARCHAR(32),
	manager_name VARCHAR(64),
	manager_email VARCHAR(64),
	manager_skill VARCHAR(512),
	employee_cod VARCHAR(32),
	employee_name VARCHAR(64),
	employee_email VARCHAR(64),
	employee_team VARCHAR(64),
	employee_skill VARCHAR(512)
);

CREATE SCHEMA IF NOT EXISTS staff;
DROP TABLE IF EXISTS staff.EMPLOYEE;

CREATE TABLE staff.EMPLOYEE
(
	id_employee INTEGER NOT NULL,
	cod_employee VARCHAR(64) NOT NULL,
	dsc_team VARCHAR(128),
	dsc_name VARCHAR(64) NOT NULL,
	dsc_email VARCHAR(64),
	dsc_skill VARCHAR(128),
	fk_id_project INTEGER,
	dsc_persisted_by VARCHAR(32) DEFAULT 'API',
	PRIMARY KEY (id_employee, fk_id_project),
	UNIQUE (cod_employee)
);

CREATE SCHEMA IF NOT EXISTS pm;
DROP TABLE IF EXISTS pm.PROJECT;
CREATE TABLE pm.PROJECT
(
	id_project INTEGER NOT NULL,
	fk_id_manager INTEGER NOT NULL,
	fk_id_user INTEGER NOT NULL,
	cod_project VARCHAR(32),
	dsc_project VARCHAR(64),
	dat_init_plan DATE,
	dat_end_plan DATE,
	dsc_persisted_by VARCHAR(32) DEFAULT 'API',
	flg_closed_project VARCHAR(32) DEFAULT 'N',
	PRIMARY KEY (id_project),
	UNIQUE (cod_project)
);

CREATE SCHEMA IF NOT EXISTS auth;
DROP TABLE IF EXISTS auth.SYS_USER;
CREATE TABLE auth.SYS_USER
(
	id_user INTEGER NOT NULL,
	cod_username VARCHAR(32) NOT NULL,
	cod_password VARCHAR NOT NULL,
	dsc_user VARCHAR,
	flg_is_admin VARCHAR(1) DEFAULT 'N',
	dsc_persisted_by VARCHAR(32) DEFAULT 'API',
	PRIMARY KEY (id_user),
	UNIQUE (cod_username)
);

DROP TABLE IF EXISTS staff.MANAGER;
CREATE TABLE staff.MANAGER
(
	id_manager INTEGER NOT NULL,
	cod_manager VARCHAR(64) NOT NULL,
	dsc_name VARCHAR(64) NOT NULL,
	dsc_email VARCHAR(64),
	dsc_skill VARCHAR(128),
	dsc_persisted_by VARCHAR(32) DEFAULT 'API',
	PRIMARY KEY (id_manager),
	UNIQUE (cod_manager)
);

-- Foreing Keys
ALTER TABLE pm.PROJECT ADD FOREIGN KEY (fk_id_manager) REFERENCES staff.MANAGER(id_manager);
ALTER TABLE pm.PROJECT ADD FOREIGN KEY (fk_id_user) REFERENCES auth.SYS_USER(id_user);
ALTER TABLE staff.EMPLOYEE ADD FOREIGN KEY (fk_id_project) REFERENCES pm.PROJECT(id_project);

ALTER TABLE pm.PROJECT ADD CONSTRAINT TEST_DATE_INTEG CHECK  (dat_end_plan > dat_init_plan);

-----------------------
-- SPRING BATCH CONTROL
-----------------------

CREATE SEQUENCE IF NOT EXISTS BATCH_STEP_EXECUTION_SEQ;
CREATE SEQUENCE IF NOT EXISTS BATCH_JOB_EXECUTION_SEQ;
CREATE SEQUENCE IF NOT EXISTS BATCH_JOB_SEQ;

DROP TABLE IF EXISTS BATCH_JOB_EXECUTION_PARAMS;
DROP TABLE IF EXISTS BATCH_STEP_EXECUTION_CONTEXT;
DROP TABLE IF EXISTS BATCH_STEP_EXECUTION;
DROP TABLE IF EXISTS BATCH_JOB_EXECUTION_CONTEXT;
DROP TABLE IF EXISTS BATCH_JOB_EXECUTION;
DROP TABLE IF EXISTS BATCH_JOB_INSTANCE;


CREATE TABLE BATCH_JOB_INSTANCE  (
  JOB_INSTANCE_ID BIGINT  PRIMARY KEY ,
  VERSION BIGINT,
  JOB_NAME VARCHAR(100) NOT NULL ,
  JOB_KEY VARCHAR(2500)
);

CREATE TABLE BATCH_JOB_EXECUTION  (
  JOB_EXECUTION_ID BIGINT  PRIMARY KEY ,
  VERSION BIGINT,
  JOB_INSTANCE_ID BIGINT NOT NULL,
  CREATE_TIME TIMESTAMP NOT NULL,
  START_TIME TIMESTAMP DEFAULT NULL,
  END_TIME TIMESTAMP DEFAULT NULL,
  STATUS VARCHAR(10),
  EXIT_CODE VARCHAR(20),
  EXIT_MESSAGE VARCHAR(2500),
  LAST_UPDATED TIMESTAMP,
  JOB_CONFIGURATION_LOCATION VARCHAR(2500) NULL,
  constraint JOB_INSTANCE_EXECUTION_FK foreign key (JOB_INSTANCE_ID)
  references BATCH_JOB_INSTANCE(JOB_INSTANCE_ID)
) ;

CREATE TABLE BATCH_JOB_EXECUTION_PARAMS  (
	JOB_EXECUTION_ID BIGINT NOT NULL ,
	TYPE_CD VARCHAR(6) NOT NULL ,
	KEY_NAME VARCHAR(100) NOT NULL ,
	STRING_VAL VARCHAR(250) ,
	DATE_VAL DATE DEFAULT NULL ,
	LONG_VAL BIGINT ,
	DOUBLE_VAL DOUBLE PRECISION ,
	IDENTIFYING CHAR(1) NOT NULL ,
	constraint JOB_EXEC_PARAMS_FK foreign key (JOB_EXECUTION_ID)
	references BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
);

CREATE TABLE BATCH_STEP_EXECUTION  (
  STEP_EXECUTION_ID BIGINT  PRIMARY KEY ,
  VERSION BIGINT NOT NULL,
  STEP_NAME VARCHAR(100) NOT NULL,
  JOB_EXECUTION_ID BIGINT NOT NULL,
  START_TIME TIMESTAMP NOT NULL ,
  END_TIME TIMESTAMP DEFAULT NULL,
  STATUS VARCHAR(10),
  COMMIT_COUNT BIGINT ,
  READ_COUNT BIGINT ,
  FILTER_COUNT BIGINT ,
  WRITE_COUNT BIGINT ,
  READ_SKIP_COUNT BIGINT ,
  WRITE_SKIP_COUNT BIGINT ,
  PROCESS_SKIP_COUNT BIGINT ,
  ROLLBACK_COUNT BIGINT ,
  EXIT_CODE VARCHAR(20) ,
  EXIT_MESSAGE VARCHAR(2500) ,
  LAST_UPDATED TIMESTAMP,
  constraint JOB_EXECUTION_STEP_FK foreign key (JOB_EXECUTION_ID)
  references BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
) ;

CREATE TABLE BATCH_JOB_EXECUTION_CONTEXT  (
  JOB_EXECUTION_ID BIGINT PRIMARY KEY,
  SHORT_CONTEXT VARCHAR(2500) NOT NULL,
  SERIALIZED_CONTEXT TEXT,
  constraint JOB_EXEC_CTX_FK foreign key (JOB_EXECUTION_ID)
  references BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
) ;

CREATE TABLE BATCH_STEP_EXECUTION_CONTEXT  (
  STEP_EXECUTION_ID BIGINT PRIMARY KEY,
  SHORT_CONTEXT VARCHAR(2500) NOT NULL,
  SERIALIZED_CONTEXT TEXT,
  constraint STEP_EXEC_CTX_FK foreign key (STEP_EXECUTION_ID)
  references BATCH_STEP_EXECUTION(STEP_EXECUTION_ID)
) ;

---------
-- DATA
---------
-- CREATE ADMIN USER
DELETE FROM auth.SYS_USER WHERE COD_USERNAME = 'admin';
DELETE FROM auth.SYS_USER WHERE COD_USERNAME = 'batch';

INSERT INTO auth.SYS_USER (ID_USER,COD_USERNAME, COD_PASSWORD, DSC_USER, FLG_IS_ADMIN)VALUES (NEXTVAL('user_seq'),'admin','admin#123','admin','Y');
INSERT INTO auth.SYS_USER (ID_USER, COD_USERNAME, COD_PASSWORD, DSC_USER, FLG_IS_ADMIN) VALUES (NEXTVAL('user_seq'), 'batch', 'batch#12', 'batch', 'Y');